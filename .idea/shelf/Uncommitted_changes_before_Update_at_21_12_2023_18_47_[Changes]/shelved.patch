Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import datetime\r\nimport os\r\nimport random\r\nimport sys\r\n\r\nimport pygame\r\n\r\n\r\ndef load_image(name, colorkey=None):\r\n    fullname = os.path.join('data', name)\r\n    # если файл не существует, то выходим\r\n    if not os.path.isfile(fullname):\r\n        print(f\"Файл с изображением '{fullname}' не найден\")\r\n        sys.exit()\r\n    image = pygame.image.load(fullname)\r\n    if colorkey is not None:\r\n        if colorkey == -1:\r\n            colorkey = image.get_at((0, 0))\r\n        image.set_colorkey(colorkey)\r\n    return image\r\n\r\n\r\ndef newDialog():\r\n    font_path = os.path.join(\"data/fonts\", \"comic.ttf\")\r\n    font = pygame.font.Font(font_path, 20)\r\n    render_fraze_1 = font.render('', True, (255, 255, 255))\r\n    render_fraze_2 = font.render('', True, (255, 255, 255))\r\n    render_fraze_3 = font.render('', True, (255, 255, 255))\r\n    return render_fraze_1, render_fraze_2, render_fraze_3\r\n\r\n\r\ndef mathGame():\r\n    global background, all_sprites, player_group, player, door, door_group, rectangle_group, loc5\r\n    fon = pygame.transform.scale(load_image('a1_m4.png'), (800, 500))\r\n    screen.blit(fon, (0, 0))\r\n\r\n    a = random.randint(0, 100)\r\n    difference = random.randint(0, 9)\r\n    b = difference - a\r\n    fraze_1 = 'Я великий маг этого подземелья,'\r\n    fraze_2 = 'и я никому не дам ходить по нему'\r\n    fraze_3 = 'без моего разрешения!'\r\n    screen.fill((0, 0, 0))\r\n    screen.blit(fon, (0, 0))\r\n    font_path = os.path.join(\"data/fonts\", \"comic.ttf\")\r\n    font = pygame.font.Font(font_path, 20)\r\n    render_fraze_1, render_fraze_2, render_fraze_3 = newDialog()\r\n\r\n    win = False\r\n    i = 1\r\n    k = 0\r\n    while True:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                terminate()\r\n            elif event.type == pygame.KEYDOWN:\r\n                if event.key == pygame.K_z and k == 0:\r\n                    screen.fill((0, 0, 0))\r\n                    screen.blit(fon, (0, 0))\r\n                    if b < 0:\r\n                        question = f\"{a}{b}\"\r\n                    else:\r\n                        question = f\"{a} + {b}\"\r\n                    fraze_1 = 'Но ты можешь попытать удачу,'\r\n                    fraze_2 = 'и решить мою задачу'\r\n                    fraze_3 = 'сколько будет: ' + question\r\n                    render_fraze_1, render_fraze_2, render_fraze_3 = (\r\n                        newDialog())\r\n                    i = 1\r\n                    k = 1\r\n                elif 48 <= event.key <= 58 and k == 1:\r\n                    fraze_1 = event.key - 48\r\n                    render_fraze_1, render_fraze_2, render_fraze_3 = (\r\n                        newDialog())\r\n                    if fraze_1 == difference:\r\n                        screen.fill((0, 0, 0))\r\n                        screen.blit(fon, (0, 0))\r\n                        fraze_1 = 'Я вижу, что ты неплох в математике'\r\n                        fraze_2 = 'на этот раз я тебя пропускаю,'\r\n                        fraze_3 = 'но мы еще встретимся!'\r\n                        win = True\r\n                    else:\r\n                        screen.fill((0, 0, 0))\r\n                        screen.blit(fon, (0, 0))\r\n                        fraze_1 = 'Я вижу, что ты слаб,'\r\n                        fraze_2 = 'возвращайся,'\r\n                        fraze_3 = 'лишь когда будешь достоин'\r\n                    i = 1\r\n                    k = 2\r\n                elif event.key == pygame.K_z and k == 2:\r\n                    if win:\r\n                        all_sprites = pygame.sprite.Group()\r\n                        player_group = pygame.sprite.Group()\r\n                        rectangle_group = pygame.sprite.Group()\r\n                        background = Background('a1_m5.png', (900, 784))\r\n                        all_sprites.add(background)\r\n                        player = Player(450, 300, 1)\r\n                        player.loc = 4\r\n\r\n                        loc5 = 0\r\n                        camera.update(player)\r\n                        door = Door(20000, 20000)\r\n                        for sprite in all_sprites:\r\n                            camera.apply(sprite)\r\n                        return\r\n                    else:\r\n                        end_screen(1, False)\r\n                        return\r\n\r\n        if i <= len(fraze_1):\r\n            render_fraze_1 = font.render(fraze_1[:i], True, (255, 255, 255))\r\n        elif i <= len(fraze_1) + len(fraze_2):\r\n            render_fraze_2 = font.render(fraze_2[:i - len(fraze_1)], True,\r\n                                         (255, 255, 255))\r\n        elif i <= len(fraze_1) + len(fraze_2) + len(fraze_3):\r\n            render_fraze_3 = font.render(\r\n                fraze_3[:i - len(fraze_1) - len(fraze_2)], True,\r\n                (255, 255, 255))\r\n        i += 1\r\n        screen.blit(render_fraze_1, (230, 85))\r\n        screen.blit(render_fraze_2, (230, 115))\r\n        screen.blit(render_fraze_3, (230, 145))\r\n        player_group.draw(screen)\r\n        pygame.display.flip()\r\n        clock.tick(20)\r\n        clock.tick(FPS)\r\n\r\n\r\ndef terminate():\r\n    pygame.quit()\r\n    sys.exit()\r\n\r\n\r\ndef start_screen():\r\n    fon = pygame.transform.scale(load_image('fon.jpg'), (800, 500))\r\n    screen.blit(fon, (0, 0))\r\n    pygame.display.flip()\r\n    clock.tick(0.7)\r\n    fon = pygame.transform.scale(load_image('blackfon.png'), (800, 500))\r\n    screen.blit(fon, (0, 0))\r\n    pygame.display.flip()\r\n    while True:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                terminate()\r\n            elif (event.type == pygame.KEYDOWN or event.type ==\r\n                  pygame.MOUSEBUTTONDOWN):\r\n                if True:\r\n                    act1()\r\n                    return\r\n        clock.tick(FPS)\r\n\r\n\r\ndef end_screen(n, winOrdie):\r\n    fon = pygame.transform.scale(load_image('gameover.jpg'), (800, 500))\r\n    screen.blit(fon, (0, 0))\r\n    pygame.display.flip()\r\n\r\n    font_path = os.path.join(\"data/fonts\", \"comic.ttf\")\r\n    font = pygame.font.Font(font_path, 35)\r\n    if winOrdie:\r\n        t = font.render(f\"Win\", True, (0, 0, 0))\r\n    else:\r\n        t = font.render(f\"Lose\", True, (0, 0, 0))\r\n    tm = (datetime.datetime.now() - time).total_seconds()\r\n    t2 = font.render(f\"{int(tm // 60)} min {int(tm - (tm // 60) * 60)} sec\",\r\n                     True, (0, 0, 0))\r\n    while True:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                terminate()\r\n            elif (event.type == pygame.KEYDOWN or event.type ==\r\n                  pygame.MOUSEBUTTONDOWN):\r\n                if True:\r\n                    if n == 1:\r\n                        act1()\r\n                    elif n == 2:\r\n                        act2()\r\n                    elif n == 3:\r\n                        act3()\r\n                    return\r\n\r\n        screen.blit(t, (300, 200))\r\n        screen.blit(t2, (300, 300))\r\n        pygame.display.flip()\r\n        clock.tick(FPS)\r\n\r\n\r\ndef act1():\r\n    global all_sprites, player_group, player, background, door, door_group, i, word_group, x, y, loc5, time\r\n    time = datetime.datetime.now()\r\n    fon = pygame.transform.scale(load_image('act1.png'), (800, 500))\r\n    screen.blit(fon, (0, 0))\r\n    pygame.display.flip()\r\n    clock.tick(1)\r\n\r\n    all_sprites = pygame.sprite.Group()\r\n    player_group = pygame.sprite.Group()\r\n    door_group = pygame.sprite.Group()\r\n    background = Background('a1_m1.png', (1360, 760))\r\n    door = Door(1180, 440)\r\n    all_sprites.add(background)\r\n    door_group.add(door)\r\n    player = Player(290, 470, 1)\r\n    word_group = pygame.sprite.Group()\r\n    x, y = 0, 0\r\n    loc5 = 0\r\n    i = 0\r\n    camera.update(player)\r\n    for sprite in all_sprites:\r\n        camera.apply(sprite)\r\n\r\n\r\ndef act2():\r\n    global all_sprites, player_group, player, background, door, door_group, time\r\n    time = datetime.datetime.now()\r\n    fon = pygame.transform.scale(load_image('act2.png'), (800, 500))\r\n    screen.blit(fon, (0, 0))\r\n    pygame.display.flip()\r\n    clock.tick(1)\r\n\r\n    all_sprites = pygame.sprite.Group()\r\n    player_group = pygame.sprite.Group()\r\n    door_group = pygame.sprite.Group()\r\n    background = Background('a2_m1.jpg', (3000, 1500))\r\n    all_sprites.add(background)\r\n    door_group.add(door)\r\n    player = Player(1090, 720, 2)\r\n    camera.update(player)\r\n    for sprite in all_sprites:\r\n        camera.apply(sprite)\r\n\r\n\r\ndef act3():\r\n    fon = pygame.transform.scale(load_image('act3.png'), (800, 500))\r\n    screen.blit(fon, (0, 0))\r\n    pygame.display.flip()\r\n    clock.tick(1)\r\n\r\n\r\ndef menu():\r\n    fon = pygame.transform.scale(load_image('Menu.png'), (800, 500))\r\n    screen.blit(fon, (0, 0))\r\n    pygame.display.flip()\r\n    while True:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                terminate()\r\n            elif event.type == pygame.KEYDOWN:\r\n                if event.key == pygame.K_1:\r\n                    act1()\r\n                    return\r\n                if event.key == pygame.K_2:\r\n                    act2()\r\n                    return\r\n                if event.key == pygame.K_3:\r\n                    act3()\r\n                    return\r\n                if event.key == pygame.K_p:\r\n                    return\r\n\r\n        clock.tick(FPS)\r\n\r\n\r\nclass Player(pygame.sprite.Sprite):\r\n    image = load_image('m.c.front_stop.jpg')\r\n    image = pygame.transform.scale(image, (40, 60))\r\n\r\n    def __init__(self, pos_x, pos_y, stena):\r\n        super().__init__(player_group, all_sprites)\r\n        self.image = Player.image\r\n        self.rect = self.image.get_rect().move(\r\n            pos_x, pos_y)\r\n        self.x = pos_x + 20\r\n        self.y = pos_y + 60\r\n        self.step = 1\r\n        self.back = False\r\n        self.last_skin_change_time = 0\r\n        self.direction = ''\r\n        self.mask = pygame.mask.from_surface(self.image)\r\n        self.loc = 0\r\n        if stena == 1:\r\n            self.stena = [(2, 0, 0)]\r\n        elif stena == 2:\r\n            self.stena = [(34, 177, 76), (0, 162, 232)]\r\n\r\n    def stop(self):\r\n        image = self.image\r\n        if self.direction == 'left':\r\n            image = load_image(f'm.c.left_stop.jpg')\r\n        elif self.direction == 'right':\r\n            image = load_image(f'm.c.right_stop.jpg')\r\n        elif self.direction == 'down':\r\n            image = load_image(f'm.c.front_stop.jpg')\r\n        elif self.direction == 'up':\r\n            image = load_image(f'm.c.back_stop.jpg')\r\n        self.image = pygame.transform.scale(image, (40, 60))\r\n\r\n    def update(self, move_up, move_down, move_left, move_right):\r\n        global all_sprites, background, player, player_group, door_group, door, word_group, x, y\r\n        image = self.image\r\n        current_time = pygame.time.get_ticks()\r\n        if move_left:\r\n            self.direction = 'left'\r\n            self.rect.x -= 5\r\n            self.x -= 5\r\n            if background.get_rgb(self.x, self.y) in self.stena:\r\n                self.rect.x += 5\r\n                self.x += 5\r\n            if current_time - self.last_skin_change_time > 150:\r\n                self.last_skin_change_time = current_time\r\n                if self.step == 1:\r\n                    self.step += 1\r\n                    self.back = False\r\n                elif self.step == 2:\r\n                    if self.back:\r\n                        self.step -= 1\r\n                    else:\r\n                        self.step += 1\r\n                elif self.step == 3:\r\n                    self.step -= 1\r\n                    self.back = True\r\n\r\n            image = load_image(f'm.c.left_walk_{self.step}.jpg')\r\n        if move_right:\r\n            self.direction = 'right'\r\n            self.rect.x += 5\r\n            self.x += 5\r\n            if background.get_rgb(self.x, self.y) in self.stena:\r\n                self.rect.x -= 5\r\n                self.x -= 5\r\n            if current_time - self.last_skin_change_time > 150:\r\n                self.last_skin_change_time = current_time\r\n                if self.step == 1:\r\n                    self.step += 1\r\n                    self.back = False\r\n                elif self.step == 2:\r\n                    if self.back:\r\n                        self.step -= 1\r\n                    else:\r\n                        self.step += 1\r\n                elif self.step == 3:\r\n                    self.step -= 1\r\n                    self.back = True\r\n\r\n            image = load_image(f'm.c.right_walk_{self.step}.jpg')\r\n        if move_up:\r\n            self.direction = 'up'\r\n            self.rect.y -= 5\r\n            self.y -= 5\r\n            if background.get_rgb(self.x, self.y) in self.stena:\r\n                self.rect.y += 5\r\n                self.y += 5\r\n            if current_time - self.last_skin_change_time > 150:\r\n                self.last_skin_change_time = current_time\r\n                if self.step == 1:\r\n                    self.step += 1\r\n                    self.back = False\r\n                elif self.step == 2:\r\n                    if self.back:\r\n                        self.step -= 1\r\n                    else:\r\n                        self.step += 1\r\n                elif self.step == 3:\r\n                    self.step -= 1\r\n                    self.back = True\r\n\r\n            image = load_image(f'm.c.back_walk_{self.step}.jpg')\r\n        if move_down:\r\n            self.direction = 'down'\r\n            self.rect.y += 5\r\n            self.y += 5\r\n            if background.get_rgb(self.x, self.y) in self.stena:\r\n                self.rect.y -= 5\r\n                self.y -= 5\r\n            if current_time - self.last_skin_change_time > 150:\r\n                self.last_skin_change_time = current_time\r\n                if self.step == 1:\r\n                    self.step += 1\r\n                    self.back = False\r\n                elif self.step == 2:\r\n                    if self.back:\r\n                        self.step -= 1\r\n                    else:\r\n                        self.step += 1\r\n                elif self.step == 3:\r\n                    self.step -= 1\r\n                    self.back = True\r\n\r\n            image = load_image(f'm.c.front_walk_{self.step}.jpg')\r\n        self.image = pygame.transform.scale(image, (40, 60))\r\n        if pygame.sprite.collide_mask(self, door):\r\n            if self.loc == 0:\r\n                all_sprites = pygame.sprite.Group()\r\n                player_group = pygame.sprite.Group()\r\n                door_group = pygame.sprite.Group()\r\n                background = Background('a1_m2.png', (600, 1300))\r\n                all_sprites.add(background)\r\n                player = Player(240, 950, 1)\r\n                player.loc = 1\r\n                wizardRus.rect.x = 240\r\n                wizardRus.rect.y = 600\r\n                wizardRus.canRun = False\r\n                wizardRus.y = 600\r\n                all_sprites.add(wizardRus)\r\n                door = Door(240, 100)\r\n            elif self.loc == 1:\r\n                all_sprites = pygame.sprite.Group()\r\n                player_group = pygame.sprite.Group()\r\n                word_group = pygame.sprite.Group()\r\n                door_group = pygame.sprite.Group()\r\n                background = Background('a1_m3.png', (2100, 500))\r\n                all_sprites.add(background)\r\n                door = Door(1800, 200)\r\n                player = Player(200, 330, 1)\r\n                player.loc = 2\r\n            elif self.loc == 2:\r\n                all_sprites = pygame.sprite.Group()\r\n                player_group = pygame.sprite.Group()\r\n                background = Background('a1_m4.jpg', (700, 500))\r\n                all_sprites.add(background)\r\n                player = Player(375, 300, 1)\r\n                player.loc = 3\r\n                mathGame()\r\n                x = player.x\r\n                y = player.y\r\n            elif self.loc == 5:\r\n                door.rect.x = 20000\r\n                self.loc = 6\r\n                end_screen(2, True)\r\n\r\n        camera.update(player)\r\n        for sprite in all_sprites:\r\n            camera.apply(sprite)\r\n\r\n\r\nclass Letters(pygame.sprite.Sprite):\r\n    def __init__(self, pos_x, pos_y):\r\n        super().__init__(all_sprites)\r\n        a = random.choice(['letter_a.png', 'letter_b.png', 'letter_v.png',\r\n                           'letter_g.png', 'letter_d.png'])\r\n        image_path = load_image(a)\r\n        self.image = pygame.transform.scale(image_path, (40, 60))\r\n        self.rect = self.image.get_rect().move(pos_x, pos_y)\r\n\r\n    def update(self):\r\n        self.rect.x -= 9\r\n        if pygame.sprite.collide_mask(self, player):\r\n            end_screen(1, False)\r\n            return\r\n\r\n\r\nclass Background(pygame.sprite.Sprite):\r\n    def __init__(self, image_path, size):\r\n        super().__init__()\r\n        self.image = load_image(image_path)\r\n        self.image = pygame.transform.scale(self.image, size)\r\n        self.rect = self.image.get_rect()\r\n        self.mask = pygame.mask.from_threshold(self.image, (237, 28, 36),\r\n                                               (1, 1, 1, 255))\r\n\r\n    def get_rgb(self, x, y):\r\n        pixel = pygame.PixelArray(self.image)\r\n        return self.image.unmap_rgb(pixel[x][y])\r\n\r\n\r\nclass Door(pygame.sprite.Sprite):\r\n    image_path = load_image('exit-enter_a1.png')\r\n    image_path = pygame.transform.scale(image_path, (120, 96))\r\n    sprite_image = image_path\r\n\r\n    def __init__(self, pos_x, pos_y):\r\n        super().__init__(all_sprites)\r\n        self.image = Door.sprite_image\r\n        self.rect = self.image.get_rect().move(pos_x, pos_y + 20)\r\n        self.mask = pygame.mask.from_surface(self.image)\r\n\r\n\r\nclass Rectangle(pygame.sprite.Sprite):\r\n    def __init__(self, pos_x, pos_y, vx, vy, xx, yy, canDamage):\r\n        if canDamage:\r\n            image_path = load_image('redrect.jpg')\r\n        else:\r\n            image_path = load_image('warning rect.png')\r\n        image_path = pygame.transform.scale(image_path, (xx, yy))\r\n        sprite_image = image_path\r\n        super().__init__(rectangle_group, all_sprites)\r\n        self.image = sprite_image\r\n        self.rect = self.image.get_rect().move(pos_x, pos_y + 20)\r\n        self.mask = pygame.mask.from_surface(self.image)\r\n        self.vx = vx\r\n        self.vy = vy\r\n        self.canDamage = canDamage\r\n\r\n    def update(self):\r\n        global rectangle_group\r\n        self.rect.x += 2 * self.vx\r\n        self.rect.y += 2 * self.vy\r\n        if self.canDamage:\r\n            if pygame.sprite.spritecollideany(self, horizontal_borders):\r\n                self.rect.x = 10000\r\n            if pygame.sprite.spritecollideany(self, vertical_borders):\r\n                self.rect.x = 10000\r\n\r\n            if pygame.sprite.collide_mask(self, player):\r\n                for j in rectangle_group:\r\n                    j.rect.x = 10000\r\n\r\n                rectangle_group = pygame.sprite.Group()\r\n                end_screen(1, False)\r\n                return\r\n\r\n\r\nclass wizardRus(pygame.sprite.Sprite):\r\n    image = load_image('wizardRus.png')\r\n    image = pygame.transform.scale(image, (80, 90))\r\n\r\n    def __init__(self, pos_x, pos_y):\r\n        super().__init__()\r\n        self.image = wizardRus.image\r\n        self.rect = self.image.get_rect().move(\r\n            pos_x, pos_y)\r\n        self.canRun = False\r\n        self.y = pos_y\r\n\r\n    def update(self):\r\n        if self.canRun:\r\n            self.rect.y -= 10\r\n            self.y -= 10\r\n            if self.y <= 300:\r\n                self.rect.y = -1000\r\n        if player.y <= 800:\r\n            self.canRun = True\r\n\r\n\r\nwizardRus = wizardRus(2000, 2000)\r\n\r\n\r\nclass Camera:\r\n    # зададим начальный сдвиг камеры\r\n    def __init__(self):\r\n        self.dx = 0\r\n        self.dy = 0\r\n\r\n    def apply(self, obj):\r\n        obj.rect.x += self.dx\r\n        obj.rect.y += self.dy\r\n\r\n    # позиционировать камеру на объекте target\r\n    def update(self, target):\r\n        self.dx = -(target.rect.x + target.rect.w // 2 - width // 2)\r\n        self.dy = -(target.rect.y + target.rect.h // 2 - height // 2)\r\n\r\n\r\nclock = pygame.time.Clock()\r\nFPS = 60\r\n# группы спрайтов\r\nall_sprites = pygame.sprite.Group()\r\nplayer_group = pygame.sprite.Group()\r\ndoor_group = pygame.sprite.Group()\r\nrectangle_group = pygame.sprite.Group()\r\nhorizontal_borders = pygame.sprite.Group()\r\nvertical_borders = pygame.sprite.Group()\r\nword_group = pygame.sprite.Group()\r\n\r\ntime = datetime.datetime.now()\r\nx, y = 0, 0\r\nrect = Rectangle(20000, 20000, 0, 0, 10, 500, False)\r\n\r\nloc5 = 0\r\ncamera = Camera()\r\n\r\nif __name__ == '__main__':\r\n    pygame.init()\r\n    pygame.display.set_caption('Entangled Tale')\r\n    size = width, height = 800, 500\r\n    screen = pygame.display.set_mode(size)\r\n    start_screen()\r\n\r\n    i = 0\r\n    running = True\r\n    while running:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                running = False\r\n            if event.type == pygame.KEYDOWN:\r\n                if event.key == pygame.K_o:\r\n                    menu()\r\n            if event.type == pygame.KEYUP:\r\n                player.stop()\r\n        keys = pygame.key.get_pressed()\r\n\r\n        screen.fill((2, 0, 0))\r\n        # Обновление игровых объектов\r\n        player.update(keys[pygame.K_UP], keys[pygame.K_DOWN],\r\n                      keys[pygame.K_LEFT], keys[pygame.K_RIGHT])\r\n        player.update(keys[pygame.K_w], keys[pygame.K_s],\r\n                      keys[pygame.K_a], keys[pygame.K_d])\r\n        # обновляем положение всех спрайтов\r\n        for sprite in all_sprites:\r\n            camera.apply(sprite)\r\n        camera.update(player)\r\n        wizardRus.update()\r\n        all_sprites.draw(screen)\r\n        player_group.draw(screen)\r\n        if player.loc == 2:\r\n            i += 1\r\n            if i % 40 == 0:\r\n                letter = Letters(x - player.x + 2500,\r\n                                 random.randint(y - player.y + 450,\r\n                                                y - player.y + 660))\r\n                word_group.add(letter)\r\n            word_group.update()\r\n            word_group.draw(screen)\r\n        if player.loc == 4:\r\n            if loc5 <= 1000 and loc5 % 200 == 0:\r\n                try:\r\n                    n = random.randint(-1, 3) * 100\r\n                    while n == m:\r\n                        m = random.randint(-1, 3) * 200\r\n                except:\r\n                    pass\r\n                rect.rect.x = 20000\r\n                rect = Rectangle(x - player.x + m,\r\n                                 y - player.y - 78, 0, 0, 450,\r\n                                 519, False)\r\n            if loc5 <= 1000 and loc5 % 200 == 140:\r\n                rect.rect.x = 20000\r\n                rect = Rectangle(x - player.x + m,\r\n                                 y - player.y - 78, 0, 0, 450,\r\n                                 519, True)\r\n            if 1000 <= loc5 <= 3000 and loc5 % 100 == 0:\r\n                rect.rect.x = 20000\r\n                Rectangle(x - player.x + 800,\r\n                          y - player.y + random.randint(-100, 150), -3, 0, 10,\r\n                          random.randint(50, 300), True)\r\n            if 3200 <= loc5 <= 4000 and loc5 % 200 == 0:\r\n                n = random.randint(-1, 3) * 100\r\n                while n == m:\r\n                    m = random.randint(-1, 3) * 200\r\n                rect.rect.x = 20000\r\n                rect = Rectangle(x - player.x + m,\r\n                                 y - player.y - 78, 0, 0, 450,\r\n                                 519, False)\r\n            if 3200 <= loc5 <= 4140 and loc5 % 200 == 140:\r\n                rect.rect.x = 20000\r\n                rect = Rectangle(x - player.x + m,\r\n                                 y - player.y - 78, 0, 0, 450,\r\n                                 519, True)\r\n            if loc5 == 4200:\r\n                rect.rect.x = 20000\r\n            if loc5 == 4400:\r\n                door = Door(350, 150)\r\n                player.loc = 5\r\n            loc5 += 1\r\n\r\n            rectangle_group.update()\r\n        door_group.draw(screen)\r\n        pygame.display.flip()\r\n        clock.tick(FPS)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision a68e6bd281167a19a2c4f76b88c25f3305613407)
+++ b/main.py	(date 1703162786275)
@@ -92,7 +92,7 @@
                         all_sprites = pygame.sprite.Group()
                         player_group = pygame.sprite.Group()
                         rectangle_group = pygame.sprite.Group()
-                        background = Background('a1_m5.png', (900, 784))
+                        background = Background('a1_m6.png', (900, 784))
                         all_sprites.add(background)
                         player = Player(450, 300, 1)
                         player.loc = 4
@@ -280,9 +280,9 @@
         self.mask = pygame.mask.from_surface(self.image)
         self.loc = 0
         if stena == 1:
-            self.stena = [(2, 0, 0)]
+            self.wall = [(2, 0, 0)]
         elif stena == 2:
-            self.stena = [(34, 177, 76), (0, 162, 232)]
+            self.wall = [(34, 177, 76), (0, 162, 232)]
 
     def stop(self):
         image = self.image
@@ -304,7 +304,7 @@
             self.direction = 'left'
             self.rect.x -= 5
             self.x -= 5
-            if background.get_rgb(self.x, self.y) in self.stena:
+            if background.get_rgb(self.x, self.y) in self.wall:
                 self.rect.x += 5
                 self.x += 5
             if current_time - self.last_skin_change_time > 150:
@@ -326,7 +326,7 @@
             self.direction = 'right'
             self.rect.x += 5
             self.x += 5
-            if background.get_rgb(self.x, self.y) in self.stena:
+            if background.get_rgb(self.x, self.y) in self.wall:
                 self.rect.x -= 5
                 self.x -= 5
             if current_time - self.last_skin_change_time > 150:
@@ -348,7 +348,7 @@
             self.direction = 'up'
             self.rect.y -= 5
             self.y -= 5
-            if background.get_rgb(self.x, self.y) in self.stena:
+            if background.get_rgb(self.x, self.y) in self.wall:
                 self.rect.y += 5
                 self.y += 5
             if current_time - self.last_skin_change_time > 150:
@@ -370,7 +370,7 @@
             self.direction = 'down'
             self.rect.y += 5
             self.y += 5
-            if background.get_rgb(self.x, self.y) in self.stena:
+            if background.get_rgb(self.x, self.y) in self.wall:
                 self.rect.y -= 5
                 self.y -= 5
             if current_time - self.last_skin_change_time > 150:
@@ -417,7 +417,7 @@
             elif self.loc == 2:
                 all_sprites = pygame.sprite.Group()
                 player_group = pygame.sprite.Group()
-                background = Background('a1_m4.jpg', (700, 500))
+                background = Background('a1_m4.png', (700, 500))
                 all_sprites.add(background)
                 player = Player(375, 300, 1)
                 player.loc = 3
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"8b6f0fdc-2b1f-450a-a0fe-df5878d69a75\" name=\"Changes\" comment=\"boss location processed\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/main.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"4119b603b50f1cfc9f75b08b3bdeb4df26e5d3ba\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 8\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2ZacNkP8bUFBkbLijEbVNjAOYsi\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"ASKED_ADD_EXTERNAL_FILES\": \"true\",\r\n    \"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"Python.main (2).executor\": \"Run\",\r\n    \"Python.main (4).executor\": \"Run\",\r\n    \"Python.main.executor\": \"Run\",\r\n    \"Python.test.executor\": \"Run\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"git-widget-placeholder\": \"main\",\r\n    \"last_opened_file_path\": \"C:/Users/Mar1o/PycharmProjects/Entangled Tale/data/fonts\",\r\n    \"settings.editor.selected.configurable\": \"com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Mar1o\\PycharmProjects\\Entangled Tale\\data\\fonts\" />\r\n      <recent name=\"C:\\Users\\Mar1o\\PycharmProjects\\Entangled Tale\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Mar1o\\PycharmProjects\\Entangled Tale\\data\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"Entangled Tale\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"SDK_NAME\" value=\"Python 3.11 (Entangled Tale)\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-7a29c1521ef0-d3b881c8e49f-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-233.11799.298\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"8b6f0fdc-2b1f-450a-a0fe-df5878d69a75\" name=\"Changes\" comment=\"\" />\r\n      <created>1702663593127</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1702663593127</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"start\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1702663798679</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702663798679</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"описание Entangled Tale.txt\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1702664023442</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702664023442</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"сюжет акта 1\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1702747008794</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702747008794</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"animations main character\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1702759253894</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702759253894</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"animations main character\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1702759279832</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702759279832</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"exit-enter_a1\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1702812381417</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702812381417</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"letters and doors fix\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1702825954315</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702825954315</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"first location done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1702839963644</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702839963644</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"second location drawn\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1702850812808</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702850812808</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"second location drawn\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1702850825452</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702850825452</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"third location design done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1702920190819</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702920190819</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"third location design done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1702920196004</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702920196004</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"third location design done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1703013610372</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703013610372</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"third location design done\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1703013631006</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703013631006</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"bugs fix\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1703013686583</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703013686583</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"boss location processed\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1703104830514</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1703104830514</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"17\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"start\" />\r\n    <MESSAGE value=\"описание Entangled Tale.txt\" />\r\n    <MESSAGE value=\"сюжет акта 1\" />\r\n    <MESSAGE value=\"animations main character\" />\r\n    <MESSAGE value=\"exit-enter_a1\" />\r\n    <MESSAGE value=\"letters and doors fix\" />\r\n    <MESSAGE value=\"Merge remote-tracking branch 'origin/main'\" />\r\n    <MESSAGE value=\"first location done\" />\r\n    <MESSAGE value=\"second location drawn\" />\r\n    <MESSAGE value=\"Add files via upload\" />\r\n    <MESSAGE value=\"third location design done\" />\r\n    <MESSAGE value=\"bugs fix\" />\r\n    <MESSAGE value=\"boss location processed\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"boss location processed\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision a68e6bd281167a19a2c4f76b88c25f3305613407)
+++ b/.idea/workspace.xml	(date 1703162222423)
@@ -6,6 +6,7 @@
   <component name="ChangeListManager">
     <list default="true" id="8b6f0fdc-2b1f-450a-a0fe-df5878d69a75" name="Changes" comment="boss location processed">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/data/a1_m5.png" beforeDir="false" afterPath="$PROJECT_DIR$/data/a1_m5.png" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -27,6 +28,7 @@
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+    <option name="UPDATE_TYPE" value="REBASE" />
   </component>
   <component name="ProjectColorInfo">{
   &quot;associatedIndex&quot;: 8
@@ -43,7 +45,7 @@
     "ASKED_SHARE_PROJECT_CONFIGURATION_FILES": "true",
     "Python.main (2).executor": "Run",
     "Python.main (4).executor": "Run",
-    "Python.main.executor": "Run",
+    "Python.main.executor": "Debug",
     "Python.test.executor": "Run",
     "RunOnceActivity.OpenProjectViewOnStart": "true",
     "RunOnceActivity.ShowReadmeOnStart": "true",
@@ -230,7 +232,15 @@
       <option name="project" value="LOCAL" />
       <updated>1703104830514</updated>
     </task>
-    <option name="localTasksCounter" value="17" />
+    <task id="LOCAL-00017" summary="boss location processed">
+      <option name="closed" value="true" />
+      <created>1703105401348</created>
+      <option name="number" value="00017" />
+      <option name="presentableId" value="LOCAL-00017" />
+      <option name="project" value="LOCAL" />
+      <updated>1703105401348</updated>
+    </task>
+    <option name="localTasksCounter" value="18" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
