Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nimport pygame\r\nimport sys\r\n\r\n\r\ndef load_image(name, colorkey=None):\r\n    fullname = os.path.join('data', name)\r\n    # если файл не существует, то выходим\r\n    if not os.path.isfile(fullname):\r\n        print(f\"Файл с изображением '{fullname}' не найден\")\r\n        sys.exit()\r\n    image = pygame.image.load(fullname)\r\n    if colorkey is not None:\r\n        if colorkey == -1:\r\n            colorkey = image.get_at((0, 0))\r\n        image.set_colorkey(colorkey)\r\n    return image\r\n\r\n\r\nclass Player(pygame.sprite.Sprite):\r\n    image = load_image('m.c.front_stop.jpg')\r\n    image = pygame.transform.scale(image, (40, 60))\r\n\r\n    def __init__(self, pos_x, pos_y):\r\n        super().__init__(player_group, all_sprites)\r\n        self.image = Player.image\r\n        self.rect = self.image.get_rect().move(\r\n            pos_x, pos_y)\r\n        self.x = pos_x + 20\r\n        self.y = pos_y + 60\r\n\r\n\r\nclass PlayerAct1(Player):\r\n    def __init__(self, pos_x, pos_y):\r\n        super().__init__(pos_x, pos_y)\r\n\r\n    def update(self, move_up, move_down, move_left, move_right):\r\n        global all_sprites, background, player, player_group\r\n        image = self.image\r\n        if move_left:\r\n            self.rect.x -= 6\r\n            self.x -= 6\r\n            if background.get_rgb(self.x, self.y) == (2, 0, 0):\r\n                self.rect.x += 6\r\n                self.x += 6\r\n            image = load_image('m.c.left_stop.jpg')\r\n        if move_right:\r\n            self.rect.x += 6\r\n            self.x += 6\r\n            if background.get_rgb(self.x, self.y) == (2, 0, 0):\r\n                self.rect.x -= 6\r\n                self.x -= 6\r\n            image = load_image('m.c.right_stop.jpg')\r\n        if move_up:\r\n            self.rect.y -= 6\r\n            self.y -= 6\r\n            if background.get_rgb(self.x, self.y) == (2, 0, 0):\r\n                self.rect.y += 6\r\n                self.y += 6\r\n            image = load_image('m.c.back_stop.jpg')\r\n        if move_down:\r\n            self.rect.y += 6\r\n            self.y += 6\r\n            if background.get_rgb(self.x, self.y) == (2, 0, 0):\r\n                self.rect.y -= 6\r\n                self.y -= 6\r\n            image = load_image('m.c.front_stop.jpg')\r\n        self.image = pygame.transform.scale(image, (40, 60))\r\n        if background.get_rgb(self.x, self.y) == (10, 0, 0):\r\n            all_sprites = pygame.sprite.Group()\r\n            player_group = pygame.sprite.Group()\r\n            background = Background('a1_m2.jpg', (600, 1300))\r\n            all_sprites.add(background)\r\n            player = PlayerAct1(285, 910)\r\n        elif background.get_rgb(self.x, self.y) == (9, 0, 0):\r\n            all_sprites = pygame.sprite.Group()\r\n            player_group = pygame.sprite.Group()\r\n            background = Background('a1_m3.jpg', (1300, 600))\r\n            all_sprites.add(background)\r\n            player = PlayerAct1(750, 500)\r\n\r\n\r\nclass Background(pygame.sprite.Sprite):\r\n    def __init__(self, image_path, size):\r\n        super().__init__()\r\n        self.image = load_image(image_path)\r\n        self.image = pygame.transform.scale(self.image, size)\r\n        self.rect = self.image.get_rect()\r\n\r\n    def get_rgb(self, x, y):\r\n        pixel = pygame.PixelArray(self.image)\r\n        return self.image.unmap_rgb(pixel[x][y])\r\n\r\n\r\nclock = pygame.time.Clock()\r\nFPS = 60\r\n\r\n\r\ndef terminate():\r\n    pygame.quit()\r\n    sys.exit()\r\n\r\n\r\ndef start_screen():\r\n    fon = pygame.transform.scale(load_image('fon.jpg'), (800, 500))\r\n    screen.blit(fon, (0, 0))\r\n    pygame.display.flip()\r\n    clock.tick(0.7)\r\n    fon = pygame.transform.scale(load_image('blackfon.png'), (800, 500))\r\n    screen.blit(fon, (0, 0))\r\n    pygame.display.flip()\r\n    while True:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                terminate()\r\n            elif (event.type == pygame.KEYDOWN or event.type ==\r\n                  pygame.MOUSEBUTTONDOWN):\r\n                if True:\r\n                    act1()\r\n                    return\r\n        clock.tick(FPS)\r\n\r\n\r\n# группы спрайтов\r\nall_sprites = pygame.sprite.Group()\r\nplayer_group = pygame.sprite.Group()\r\nbackground = Background('a1_m1.jpg', (1360, 520))\r\nall_sprites.add(background)\r\nplayer = Player(400, 100)\r\n\r\n\r\ndef act1():\r\n    global all_sprites, player_group, player, background\r\n    fon = pygame.transform.scale(load_image('act1.png'), (800, 500))\r\n    screen.blit(fon, (0, 0))\r\n    pygame.display.flip()\r\n    clock.tick(1)\r\n    all_sprites = pygame.sprite.Group()\r\n    player_group = pygame.sprite.Group()\r\n    background = Background('a1_m1.jpg', (1360, 520))\r\n    all_sprites.add(background)\r\n    player = PlayerAct1(400, 100)\r\n\r\n\r\ndef act2():\r\n    fon = pygame.transform.scale(load_image('act2.png'), (800, 500))\r\n    screen.blit(fon, (0, 0))\r\n    pygame.display.flip()\r\n    clock.tick(1)\r\n\r\n\r\ndef act3():\r\n    fon = pygame.transform.scale(load_image('act3.png'), (800, 500))\r\n    screen.blit(fon, (0, 0))\r\n    pygame.display.flip()\r\n    clock.tick(1)\r\n\r\n\r\ndef act4():\r\n    fon = pygame.transform.scale(load_image('act4.png'), (800, 500))\r\n    screen.blit(fon, (0, 0))\r\n    pygame.display.flip()\r\n    clock.tick(1)\r\n\r\n\r\ndef menu():\r\n    fon = pygame.transform.scale(load_image('Menu.png'), (800, 500))\r\n    screen.blit(fon, (0, 0))\r\n    pygame.display.flip()\r\n    while True:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                terminate()\r\n            elif event.type == pygame.KEYDOWN:\r\n                if event.key == pygame.K_1:\r\n                    act1()\r\n                    return\r\n                if event.key == pygame.K_2:\r\n                    act2()\r\n                    return\r\n                if event.key == pygame.K_3:\r\n                    act3()\r\n                    return\r\n                if event.key == pygame.K_4:\r\n                    act4()\r\n                    return\r\n                if event.key == pygame.K_p:\r\n                    return\r\n\r\n        clock.tick(FPS)\r\n\r\n\r\nclass Camera:\r\n    # зададим начальный сдвиг камеры\r\n    def __init__(self):\r\n        self.dx = 0\r\n        self.dy = 0\r\n\r\n    def apply(self, obj):\r\n        obj.rect.x += self.dx\r\n        obj.rect.y += self.dy\r\n\r\n    # позиционировать камеру на объекте target\r\n    def update(self, target):\r\n        self.dx = -(target.rect.x + target.rect.w // 2 - width // 2)\r\n        self.dy = -(target.rect.y + target.rect.h // 2 - height // 2)\r\n\r\n\r\ncamera = Camera()\r\nif __name__ == '__main__':\r\n    pygame.init()\r\n    pygame.display.set_caption('Entangled Tale')\r\n    size = width, height = 800, 500\r\n    screen = pygame.display.set_mode(size)\r\n    start_screen()\r\n\r\n    running = True\r\n    while running:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                running = False\r\n            if event.type == pygame.KEYDOWN:\r\n                if event.key == pygame.K_o:\r\n                    menu()\r\n        keys = pygame.key.get_pressed()\r\n\r\n        screen.fill((0, 0, 0))\r\n        camera.update(player)\r\n        # Обновление игровых объектов\r\n        player.update(keys[pygame.K_UP], keys[pygame.K_DOWN],\r\n                      keys[pygame.K_LEFT], keys[pygame.K_RIGHT])\r\n        player.update(keys[pygame.K_w], keys[pygame.K_s],\r\n                      keys[pygame.K_a], keys[pygame.K_d])\r\n        # обновляем положение всех спрайтов\r\n        for sprite in all_sprites:\r\n            camera.apply(sprite)\r\n        all_sprites.draw(screen)\r\n        player_group.draw(screen)\r\n\r\n        pygame.display.flip()\r\n        clock.tick(FPS)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 39c8893ee64b5a66685f05c7cf770c10a41534bd)
+++ b/main.py	(date 1702755989075)
@@ -28,43 +28,103 @@
             pos_x, pos_y)
         self.x = pos_x + 20
         self.y = pos_y + 60
-
-
-class PlayerAct1(Player):
-    def __init__(self, pos_x, pos_y):
-        super().__init__(pos_x, pos_y)
+        self.step = 1
+        self.back = False
+        self.last_skin_change_time = 0
+        self.direction = ''
 
     def update(self, move_up, move_down, move_left, move_right):
         global all_sprites, background, player, player_group
         image = self.image
+        current_time = pygame.time.get_ticks()
         if move_left:
+            self.direction = 'left'
             self.rect.x -= 6
             self.x -= 6
             if background.get_rgb(self.x, self.y) == (2, 0, 0):
                 self.rect.x += 6
                 self.x += 6
-            image = load_image('m.c.left_stop.jpg')
+            if current_time - self.last_skin_change_time > 150:
+                self.last_skin_change_time = current_time
+                if self.step == 1:
+                    self.step += 1
+                    self.back = False
+                elif self.step == 2:
+                    if self.back:
+                        self.step -= 1
+                    else:
+                        self.step += 1
+                elif self.step == 3:
+                    self.step -= 1
+                    self.back = True
+
+            image = load_image(f'm.c.left_walk_{self.step}.jpg')
         if move_right:
+            self.direction = 'right'
             self.rect.x += 6
             self.x += 6
             if background.get_rgb(self.x, self.y) == (2, 0, 0):
                 self.rect.x -= 6
                 self.x -= 6
-            image = load_image('m.c.right_stop.jpg')
+            if current_time - self.last_skin_change_time > 150:
+                self.last_skin_change_time = current_time
+                if self.step == 1:
+                    self.step += 1
+                    self.back = False
+                elif self.step == 2:
+                    if self.back:
+                        self.step -= 1
+                    else:
+                        self.step += 1
+                elif self.step == 3:
+                    self.step -= 1
+                    self.back = True
+
+            image = load_image(f'm.c.right_walk_{self.step}.jpg')
         if move_up:
+            self.direction = 'up'
             self.rect.y -= 6
             self.y -= 6
             if background.get_rgb(self.x, self.y) == (2, 0, 0):
                 self.rect.y += 6
                 self.y += 6
-            image = load_image('m.c.back_stop.jpg')
+            if current_time - self.last_skin_change_time > 150:
+                self.last_skin_change_time = current_time
+                if self.step == 1:
+                    self.step += 1
+                    self.back = False
+                elif self.step == 2:
+                    if self.back:
+                        self.step -= 1
+                    else:
+                        self.step += 1
+                elif self.step == 3:
+                    self.step -= 1
+                    self.back = True
+
+            image = load_image(f'm.c.back_walk_{self.step}.jpg')
         if move_down:
+            self.direction = 'down'
             self.rect.y += 6
             self.y += 6
             if background.get_rgb(self.x, self.y) == (2, 0, 0):
                 self.rect.y -= 6
                 self.y -= 6
-            image = load_image('m.c.front_stop.jpg')
+            if current_time - self.last_skin_change_time > 150:
+                self.last_skin_change_time = current_time
+                if self.step == 1:
+                    self.step += 1
+                    self.back = False
+                elif self.step == 2:
+                    if self.back:
+                        self.step -= 1
+                    else:
+                        self.step += 1
+                elif self.step == 3:
+                    self.step -= 1
+                    self.back = True
+
+            image = load_image(f'm.c.front_walk_{self.step}.jpg')
         self.image = pygame.transform.scale(image, (40, 60))
         if background.get_rgb(self.x, self.y) == (10, 0, 0):
             all_sprites = pygame.sprite.Group()
@@ -79,6 +139,24 @@
             all_sprites.add(background)
             player = PlayerAct1(750, 500)
 
+    def stop(self):
+        print(self.direction)
+        image = self.image
+        if self.direction == 'left':
+            image = load_image(f'm.c.left_stop.jpg')
+        elif self.direction == 'right':
+            image = load_image(f'm.c.right_stop.jpg')
+        elif self.direction == 'down':
+            image = load_image(f'm.c.front_stop.jpg')
+        elif self.direction == 'up':
+            image = load_image(f'm.c.back_stop.jpg')
+        self.image = pygame.transform.scale(image, (40, 60))
+
+
+class PlayerAct1(Player):
+    def __init__(self, pos_x, pos_y):
+        super().__init__(pos_x, pos_y)
+
 
 class Background(pygame.sprite.Sprite):
     def __init__(self, image_path, size):
@@ -222,6 +300,8 @@
             if event.type == pygame.KEYDOWN:
                 if event.key == pygame.K_o:
                     menu()
+            if event.type == pygame.KEYUP:
+                player.stop()
         keys = pygame.key.get_pressed()
 
         screen.fill((0, 0, 0))
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"8b6f0fdc-2b1f-450a-a0fe-df5878d69a75\" name=\"Changes\" comment=\"описание Entangled Tale.txt\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 8\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2ZacNkP8bUFBkbLijEbVNjAOYsi\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\r\n    &quot;ASKED_SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;Python.main.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/Mar1o/PycharmProjects/Entangled Tale&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Mar1o\\PycharmProjects\\Entangled Tale\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Mar1o\\PycharmProjects\\Entangled Tale\\data\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"Entangled Tale\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"SDK_NAME\" value=\"Python 3.11 (Entangled Tale)\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-67fca87a943a-d3b881c8e49f-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-233.11799.259\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"8b6f0fdc-2b1f-450a-a0fe-df5878d69a75\" name=\"Changes\" comment=\"\" />\r\n      <created>1702663593127</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1702663593127</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"start\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1702663798679</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702663798679</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"описание Entangled Tale.txt\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1702664023442</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702664023442</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"start\" />\r\n    <MESSAGE value=\"описание Entangled Tale.txt\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"описание Entangled Tale.txt\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 39c8893ee64b5a66685f05c7cf770c10a41534bd)
+++ b/.idea/workspace.xml	(date 1702759006820)
@@ -4,8 +4,9 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="8b6f0fdc-2b1f-450a-a0fe-df5878d69a75" name="Changes" comment="описание Entangled Tale.txt">
+    <list default="true" id="8b6f0fdc-2b1f-450a-a0fe-df5878d69a75" name="Changes" comment="сюжет акта 1">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -113,7 +114,15 @@
       <option name="project" value="LOCAL" />
       <updated>1702664023442</updated>
     </task>
-    <option name="localTasksCounter" value="3" />
+    <task id="LOCAL-00003" summary="сюжет акта 1">
+      <option name="closed" value="true" />
+      <created>1702747008794</created>
+      <option name="number" value="00003" />
+      <option name="presentableId" value="LOCAL-00003" />
+      <option name="project" value="LOCAL" />
+      <updated>1702747008794</updated>
+    </task>
+    <option name="localTasksCounter" value="4" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -130,6 +139,7 @@
   <component name="VcsManagerConfiguration">
     <MESSAGE value="start" />
     <MESSAGE value="описание Entangled Tale.txt" />
-    <option name="LAST_COMMIT_MESSAGE" value="описание Entangled Tale.txt" />
+    <MESSAGE value="сюжет акта 1" />
+    <option name="LAST_COMMIT_MESSAGE" value="сюжет акта 1" />
   </component>
 </project>
\ No newline at end of file
