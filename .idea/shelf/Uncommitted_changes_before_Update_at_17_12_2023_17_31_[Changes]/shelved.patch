Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import os\r\nimport random\r\n\r\nimport pygame\r\nimport sys\r\n\r\n\r\ndef load_image(name, colorkey=None):\r\n    fullname = os.path.join('data', name)\r\n    # если файл не существует, то выходим\r\n    if not os.path.isfile(fullname):\r\n        print(f\"Файл с изображением '{fullname}' не найден\")\r\n        sys.exit()\r\n    image = pygame.image.load(fullname)\r\n    if colorkey is not None:\r\n        if colorkey == -1:\r\n            colorkey = image.get_at((0, 0))\r\n        image.set_colorkey(colorkey)\r\n    return image\r\n\r\n\r\nclass Player(pygame.sprite.Sprite):\r\n    image = load_image('m.c.front_stop.jpg')\r\n    image = pygame.transform.scale(image, (40, 60))\r\n\r\n    def __init__(self, pos_x, pos_y):\r\n        super().__init__(player_group, all_sprites)\r\n        self.image = Player.image\r\n        self.rect = self.image.get_rect().move(\r\n            pos_x, pos_y)\r\n        self.x = pos_x + 20\r\n        self.y = pos_y + 60\r\n        self.step = 1\r\n        self.back = False\r\n        self.last_skin_change_time = 0\r\n        self.direction = ''\r\n        self.mask = pygame.mask.from_surface(self.image)\r\n        self.loc = 0\r\n\r\n    def stop(self):\r\n        image = self.image\r\n        if self.direction == 'left':\r\n            image = load_image(f'm.c.left_stop.jpg')\r\n        elif self.direction == 'right':\r\n            image = load_image(f'm.c.right_stop.jpg')\r\n        elif self.direction == 'down':\r\n            image = load_image(f'm.c.front_stop.jpg')\r\n        elif self.direction == 'up':\r\n            image = load_image(f'm.c.back_stop.jpg')\r\n        self.image = pygame.transform.scale(image, (40, 60))\r\n\r\n\r\nclass PlayerAct1(Player):\r\n    def __init__(self, pos_x, pos_y):\r\n        super().__init__(pos_x, pos_y)\r\n\r\n    def update(self, move_up, move_down, move_left, move_right):\r\n        global all_sprites, background, player, player_group, door_group, door\r\n        image = self.image\r\n        current_time = pygame.time.get_ticks()\r\n        if move_left:\r\n            self.direction = 'left'\r\n            self.rect.x -= 6\r\n            self.x -= 6\r\n            if background.get_rgb(self.x, self.y) == (2, 0, 0):\r\n                self.rect.x += 6\r\n                self.x += 6\r\n            if current_time - self.last_skin_change_time > 150:\r\n                self.last_skin_change_time = current_time\r\n                if self.step == 1:\r\n                    self.step += 1\r\n                    self.back = False\r\n                elif self.step == 2:\r\n                    if self.back:\r\n                        self.step -= 1\r\n                    else:\r\n                        self.step += 1\r\n                elif self.step == 3:\r\n                    self.step -= 1\r\n                    self.back = True\r\n\r\n            image = load_image(f'm.c.left_walk_{self.step}.jpg')\r\n        if move_right:\r\n            self.direction = 'right'\r\n            self.rect.x += 6\r\n            self.x += 6\r\n            if background.get_rgb(self.x, self.y) == (2, 0, 0):\r\n                self.rect.x -= 6\r\n                self.x -= 6\r\n            if current_time - self.last_skin_change_time > 150:\r\n                self.last_skin_change_time = current_time\r\n                if self.step == 1:\r\n                    self.step += 1\r\n                    self.back = False\r\n                elif self.step == 2:\r\n                    if self.back:\r\n                        self.step -= 1\r\n                    else:\r\n                        self.step += 1\r\n                elif self.step == 3:\r\n                    self.step -= 1\r\n                    self.back = True\r\n\r\n            image = load_image(f'm.c.right_walk_{self.step}.jpg')\r\n        if move_up:\r\n            self.direction = 'up'\r\n            self.rect.y -= 6\r\n            self.y -= 6\r\n            if background.get_rgb(self.x, self.y) == (2, 0, 0):\r\n                self.rect.y += 6\r\n                self.y += 6\r\n            if current_time - self.last_skin_change_time > 150:\r\n                self.last_skin_change_time = current_time\r\n                if self.step == 1:\r\n                    self.step += 1\r\n                    self.back = False\r\n                elif self.step == 2:\r\n                    if self.back:\r\n                        self.step -= 1\r\n                    else:\r\n                        self.step += 1\r\n                elif self.step == 3:\r\n                    self.step -= 1\r\n                    self.back = True\r\n\r\n            image = load_image(f'm.c.back_walk_{self.step}.jpg')\r\n        if move_down:\r\n            self.direction = 'down'\r\n            self.rect.y += 6\r\n            self.y += 6\r\n            if background.get_rgb(self.x, self.y) == (2, 0, 0):\r\n                self.rect.y -= 6\r\n                self.y -= 6\r\n            if current_time - self.last_skin_change_time > 150:\r\n                self.last_skin_change_time = current_time\r\n                if self.step == 1:\r\n                    self.step += 1\r\n                    self.back = False\r\n                elif self.step == 2:\r\n                    if self.back:\r\n                        self.step -= 1\r\n                    else:\r\n                        self.step += 1\r\n                elif self.step == 3:\r\n                    self.step -= 1\r\n                    self.back = True\r\n\r\n            image = load_image(f'm.c.front_walk_{self.step}.jpg')\r\n        self.image = pygame.transform.scale(image, (40, 60))\r\n        if pygame.sprite.collide_mask(self, door):\r\n            if self.loc == 0:\r\n                all_sprites = pygame.sprite.Group()\r\n                player_group = pygame.sprite.Group()\r\n                door_group = pygame.sprite.Group()\r\n                background = Background('a1_m2.jpg', (600, 1300))\r\n                all_sprites.add(background)\r\n                player = PlayerAct1(285, 950)\r\n                player.loc = 1\r\n                wizardRus.rect.x = 285\r\n                wizardRus.rect.y = 600\r\n                wizardRus.canRun = False\r\n                wizardRus.y = 600\r\n                all_sprites.add(wizardRus)\r\n                door = Door(260, 300)\r\n            elif self.loc == 1:\r\n                all_sprites = pygame.sprite.Group()\r\n                player_group = pygame.sprite.Group()\r\n                door_group = pygame.sprite.Group()\r\n                background = Background('a1_m3.jpg', (2100, 500))\r\n                all_sprites.add(background)\r\n                door = Door(1900, 200)\r\n                player = PlayerAct1(450, 200)\r\n                player.loc = 2\r\n            elif self.loc == 2:\r\n                all_sprites = pygame.sprite.Group()\r\n                player_group = pygame.sprite.Group()\r\n                background = Background('a1_m4.jpg', (700, 500))\r\n                all_sprites.add(background)\r\n                player = PlayerAct1(375, 300)\r\n                player.loc = 3\r\n                mathGame()\r\n\r\n        camera.update(player)\r\n        for sprite in all_sprites:\r\n            camera.apply(sprite)\r\n\r\n\r\nclass Slova(pygame.sprite.Sprite):\r\n    def __init__(self, pos_x, pos_y):\r\n        super().__init__(all_sprites)\r\n        a = random.choice(['sl1.jpg', 'sl2.jpg', 'sl3.jpg', 'sl4.jpg', 'sl5.jpg'])\r\n        image_path = load_image(a)\r\n        self.image = pygame.transform.scale(image_path, (40, 60))\r\n        self.rect = self.image.get_rect().move(pos_x, pos_y)\r\n\r\n    def update(self):\r\n        self.rect.x -= 10\r\n\r\n\r\ndef newDialog():\r\n    font = pygame.font.Font(None, 30)\r\n    t1 = font.render('', True, (255, 255, 255))\r\n    t2 = font.render('', True, (255, 255, 255))\r\n    t3 = font.render('', True, (255, 255, 255))\r\n    return t1, t2, t3\r\n\r\n\r\ndef mathGame():\r\n    global background, all_sprites, player_group, player, door, door_group\r\n    fon = pygame.transform.scale(load_image('a1_m4.jpg'), (800, 500))\r\n    screen.blit(fon, (0, 0))\r\n\r\n    n1 = random.randint(0, 100)\r\n    n3 = random.randint(0, 9)\r\n    n2 = n3 - n1\r\n    m = 'Я великий маг этого подземелья,'\r\n    m2 = 'и я никому не дам ходить по нему'\r\n    m3 = 'без моего разрешения!'\r\n    screen.fill((0, 0, 0))\r\n    screen.blit(fon, (0, 0))\r\n    font = pygame.font.Font(None, 30)\r\n    t1, t2, t3 = newDialog()\r\n\r\n    win = False\r\n    i = 1\r\n    a = 0\r\n    while True:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                terminate()\r\n            elif event.type == pygame.KEYDOWN:\r\n                if event.key == pygame.K_z and a == 0:\r\n                    screen.fill((0, 0, 0))\r\n                    screen.blit(fon, (0, 0))\r\n                    if n2 < 0:\r\n                        m1 = f\"{n1}{n2}\"\r\n                    else:\r\n                        m1 = f\"{n1}+{n2}\"\r\n                    m = 'Но ты можешь попытать удачу,'\r\n                    m2 = 'и решить мою задачу'\r\n                    m3 = 'сколько будет:' + m1\r\n                    t1, t2, t3 = newDialog()\r\n                    i = 1\r\n                    a = 1\r\n                elif 48 <= event.key <= 58 and a == 1:\r\n                    m = event.key - 48\r\n                    t1, t2, t3 = newDialog()\r\n                    if m == n3:\r\n                        screen.fill((0, 0, 0))\r\n                        screen.blit(fon, (0, 0))\r\n                        m = 'Я вижу, что ты силен в математике'\r\n                        m2 = 'на этот раз я тебя пропукаю,'\r\n                        m3 = 'но мы еще встретимся!'\r\n                        win = True\r\n                    else:\r\n                        screen.fill((0, 0, 0))\r\n                        screen.blit(fon, (0, 0))\r\n                        m = 'Я вижу, что ты слаб,'\r\n                        m2 = 'возвращайся,'\r\n                        m3 = 'лишь когда будешь достоен'\r\n                    i = 1\r\n                    a = 2\r\n                elif event.key == pygame.K_z and a == 2:\r\n                    if win:\r\n                        all_sprites = pygame.sprite.Group()\r\n                        player_group = pygame.sprite.Group()\r\n                        background = Background('a1_m5.jpg', (1200, 700))\r\n                        all_sprites.add(background)\r\n                        player = PlayerAct1(600, 450)\r\n                        camera.update(player)\r\n                        for sprite in all_sprites:\r\n                            camera.apply(sprite)\r\n                        return\r\n                    else:\r\n                        act1()\r\n                        return\r\n\r\n        if i <= len(m):\r\n            t1 = font.render(m[:i], True, (255, 255, 255))\r\n        elif i <= len(m) + len(m2):\r\n            t2 = font.render(m2[:i - len(m)], True, (255, 255, 255))\r\n        elif i <= len(m) + len(m2) + len(m3):\r\n            t3 = font.render(m3[:i - len(m) - len(m2)], True, (255, 255, 255))\r\n        i += 1\r\n        screen.blit(t1, (230, 85))\r\n        screen.blit(t2, (230, 115))\r\n        screen.blit(t3, (230, 145))\r\n        player_group.draw(screen)\r\n        pygame.display.flip()\r\n        clock.tick(20)\r\n        clock.tick(FPS)\r\n\r\n\r\nclass Background(pygame.sprite.Sprite):\r\n    def __init__(self, image_path, size):\r\n        super().__init__()\r\n        self.image = load_image(image_path)\r\n        self.image = pygame.transform.scale(self.image, size)\r\n        self.rect = self.image.get_rect()\r\n\r\n    def get_rgb(self, x, y):\r\n        pixel = pygame.PixelArray(self.image)\r\n        return self.image.unmap_rgb(pixel[x][y])\r\n\r\n\r\nclock = pygame.time.Clock()\r\nFPS = 60\r\n\r\n\r\ndef terminate():\r\n    pygame.quit()\r\n    sys.exit()\r\n\r\n\r\ndef start_screen():\r\n    fon = pygame.transform.scale(load_image('fon.jpg'), (800, 500))\r\n    screen.blit(fon, (0, 0))\r\n    pygame.display.flip()\r\n    clock.tick(0.7)\r\n    fon = pygame.transform.scale(load_image('blackfon.png'), (800, 500))\r\n    screen.blit(fon, (0, 0))\r\n    pygame.display.flip()\r\n    while True:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                terminate()\r\n            elif (event.type == pygame.KEYDOWN or event.type ==\r\n                  pygame.MOUSEBUTTONDOWN):\r\n                if True:\r\n                    act1()\r\n                    return\r\n        clock.tick(FPS)\r\n\r\n\r\nclass Door(pygame.sprite.Sprite):\r\n    image_path = load_image('exit-enter_a1.png')\r\n    image_path = pygame.transform.scale(image_path, (450, 450))\r\n    sprite_image = image_path\r\n\r\n    def __init__(self, pos_x, pos_y):\r\n        super().__init__(all_sprites)\r\n        self.image = Door.sprite_image\r\n        self.rect = self.image.get_rect().move(pos_x - 125, pos_y - 125)\r\n        self.mask = pygame.mask.from_surface(self.image)\r\n\r\n\r\n# группы спрайтов\r\nall_sprites = pygame.sprite.Group()\r\nplayer_group = pygame.sprite.Group()\r\ndoor_group = pygame.sprite.Group()\r\nplayer = Player(400, 100)\r\n\r\n\r\nclass wizardRus(pygame.sprite.Sprite):\r\n    image = load_image('wizardRus.jpg')\r\n    image = pygame.transform.scale(image, (80, 90))\r\n\r\n    def __init__(self, pos_x, pos_y):\r\n        super().__init__(all_sprites)\r\n        self.image = wizardRus.image\r\n        self.rect = self.image.get_rect().move(\r\n            pos_x, pos_y)\r\n        self.canRun = False\r\n        self.y = pos_y\r\n\r\n    def update(self):\r\n        if self.canRun:\r\n            self.rect.y -= 10\r\n            self.y -= 10\r\n            if self.y <= 300:\r\n                self.rect.y = -1000\r\n        if player.y <= 800:\r\n            self.canRun = True\r\n\r\n\r\nwizardRus = wizardRus(2000, 2000)\r\n\r\n\r\ndef act1():\r\n    global all_sprites, player_group, player, background, door, door_group\r\n    fon = pygame.transform.scale(load_image('act1.png'), (800, 500))\r\n    screen.blit(fon, (0, 0))\r\n    pygame.display.flip()\r\n    clock.tick(1)\r\n    all_sprites = pygame.sprite.Group()\r\n    player_group = pygame.sprite.Group()\r\n    door_group = pygame.sprite.Group()\r\n    background = Background('a1_m1.jpg', (1360, 520))\r\n    door = Door(1200, 200)\r\n    all_sprites.add(background)\r\n    door_group.add(door)\r\n    player = PlayerAct1(400, 100)\r\n\r\n\r\ndef act2():\r\n    fon = pygame.transform.scale(load_image('act2.png'), (800, 500))\r\n    screen.blit(fon, (0, 0))\r\n    pygame.display.flip()\r\n    clock.tick(1)\r\n\r\n\r\ndef act3():\r\n    fon = pygame.transform.scale(load_image('act3.png'), (800, 500))\r\n    screen.blit(fon, (0, 0))\r\n    pygame.display.flip()\r\n    clock.tick(1)\r\n\r\n\r\ndef menu():\r\n    fon = pygame.transform.scale(load_image('Menu.png'), (800, 500))\r\n    screen.blit(fon, (0, 0))\r\n    pygame.display.flip()\r\n    while True:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                terminate()\r\n            elif event.type == pygame.KEYDOWN:\r\n                if event.key == pygame.K_1:\r\n                    act1()\r\n                    return\r\n                if event.key == pygame.K_2:\r\n                    act2()\r\n                    return\r\n                if event.key == pygame.K_3:\r\n                    act3()\r\n                    return\r\n                if event.key == pygame.K_p:\r\n                    return\r\n\r\n        clock.tick(FPS)\r\n\r\n\r\nclass Camera:\r\n    # зададим начальный сдвиг камеры\r\n    def __init__(self):\r\n        self.dx = 0\r\n        self.dy = 0\r\n\r\n    def apply(self, obj):\r\n        obj.rect.x += self.dx\r\n        obj.rect.y += self.dy\r\n\r\n    # позиционировать камеру на объекте target\r\n    def update(self, target):\r\n        self.dx = -(target.rect.x + target.rect.w // 2 - width // 2)\r\n        self.dy = -(target.rect.y + target.rect.h // 2 - height // 2)\r\n\r\n\r\ncamera = Camera()\r\nif __name__ == '__main__':\r\n    pygame.init()\r\n    pygame.display.set_caption('Entangled Tale')\r\n    size = width, height = 800, 500\r\n    screen = pygame.display.set_mode(size)\r\n    start_screen()\r\n\r\n    i = 0\r\n\r\n    slova_group = pygame.sprite.Group()\r\n\r\n    running = True\r\n    while running:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                running = False\r\n            if event.type == pygame.KEYDOWN:\r\n                if event.key == pygame.K_o:\r\n                    menu()\r\n            if event.type == pygame.KEYUP:\r\n                player.stop()\r\n        keys = pygame.key.get_pressed()\r\n\r\n        screen.fill((0, 0, 0))\r\n        # Обновление игровых объектов\r\n        player.update(keys[pygame.K_UP], keys[pygame.K_DOWN],\r\n                      keys[pygame.K_LEFT], keys[pygame.K_RIGHT])\r\n        player.update(keys[pygame.K_w], keys[pygame.K_s],\r\n                      keys[pygame.K_a], keys[pygame.K_d])\r\n        # обновляем положение всех спрайтов\r\n        for sprite in all_sprites:\r\n            camera.apply(sprite)\r\n        camera.update(player)\r\n        wizardRus.update()\r\n        all_sprites.draw(screen)\r\n        player_group.draw(screen)\r\n        if player.loc == 2:\r\n            i += 1\r\n            if i % 25 == 0:\r\n                slovo = Slova(1500, random.randint(200, 300))\r\n                slova_group.add(slovo)\r\n            slova_group.update()\r\n            slova_group.draw(screen)\r\n        door_group.draw(screen)\r\n\r\n        pygame.display.flip()\r\n        clock.tick(FPS)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision e5ca83d9d904b91139c14deafe6bf9735a94db53)
+++ b/main.py	(date 1702823427250)
@@ -334,13 +334,13 @@
 
 class Door(pygame.sprite.Sprite):
     image_path = load_image('exit-enter_a1.png')
-    image_path = pygame.transform.scale(image_path, (450, 450))
+    image_path = pygame.transform.scale(image_path, (120, 96))
     sprite_image = image_path
 
     def __init__(self, pos_x, pos_y):
         super().__init__(all_sprites)
         self.image = Door.sprite_image
-        self.rect = self.image.get_rect().move(pos_x - 125, pos_y - 125)
+        self.rect = self.image.get_rect().move(pos_x, pos_y + 20)
         self.mask = pygame.mask.from_surface(self.image)
 
 
Index: test.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test.py b/test.py
new file mode 100644
--- /dev/null	(date 1702823220718)
+++ b/test.py	(date 1702823220718)
@@ -0,0 +1,473 @@
+import os
+import random
+
+import pygame
+import sys
+
+
+def load_image(name, colorkey=None):
+    fullname = os.path.join('data', name)
+    # если файл не существует, то выходим
+    if not os.path.isfile(fullname):
+        print(f"Файл с изображением '{fullname}' не найден")
+        sys.exit()
+    image = pygame.image.load(fullname)
+    if colorkey is not None:
+        if colorkey == -1:
+            colorkey = image.get_at((0, 0))
+        image.set_colorkey(colorkey)
+    return image
+
+
+class Player(pygame.sprite.Sprite):
+    image = load_image('m.c.front_stop.jpg')
+    image = pygame.transform.scale(image, (40, 60))
+
+    def __init__(self, pos_x, pos_y):
+        super().__init__(player_group, all_sprites)
+        self.image = Player.image
+        self.rect = self.image.get_rect().move(
+            pos_x, pos_y)
+        self.x = pos_x + 20
+        self.y = pos_y + 60
+        self.step = 1
+        self.back = False
+        self.last_skin_change_time = 0
+        self.direction = ''
+        self.mask = pygame.mask.from_surface(self.image)
+
+    def stop(self):
+        image = self.image
+        if self.direction == 'left':
+            image = load_image(f'm.c.left_stop.jpg')
+        elif self.direction == 'right':
+            image = load_image(f'm.c.right_stop.jpg')
+        elif self.direction == 'down':
+            image = load_image(f'm.c.front_stop.jpg')
+        elif self.direction == 'up':
+            image = load_image(f'm.c.back_stop.jpg')
+        self.image = pygame.transform.scale(image, (40, 60))
+
+
+class PlayerAct1(Player):
+    def __init__(self, pos_x, pos_y):
+        super().__init__(pos_x, pos_y)
+        self.loc = 0
+
+    def update(self, move_up, move_down, move_left, move_right):
+        global all_sprites, background, player, player_group, door_group, door
+        image = self.image
+        current_time = pygame.time.get_ticks()
+        if move_left:
+            self.direction = 'left'
+            self.rect.x -= 6
+            self.x -= 6
+            if background.get_rgb(self.x, self.y) == (2, 0, 0):
+                self.rect.x += 6
+                self.x += 6
+            if current_time - self.last_skin_change_time > 150:
+                self.last_skin_change_time = current_time
+                if self.step == 1:
+                    self.step += 1
+                    self.back = False
+                elif self.step == 2:
+                    if self.back:
+                        self.step -= 1
+                    else:
+                        self.step += 1
+                elif self.step == 3:
+                    self.step -= 1
+                    self.back = True
+
+            image = load_image(f'm.c.left_walk_{self.step}.jpg')
+        if move_right:
+            self.direction = 'right'
+            self.rect.x += 6
+            self.x += 6
+            if background.get_rgb(self.x, self.y) == (2, 0, 0):
+                self.rect.x -= 6
+                self.x -= 6
+            if current_time - self.last_skin_change_time > 150:
+                self.last_skin_change_time = current_time
+                if self.step == 1:
+                    self.step += 1
+                    self.back = False
+                elif self.step == 2:
+                    if self.back:
+                        self.step -= 1
+                    else:
+                        self.step += 1
+                elif self.step == 3:
+                    self.step -= 1
+                    self.back = True
+
+            image = load_image(f'm.c.right_walk_{self.step}.jpg')
+        if move_up:
+            self.direction = 'up'
+            self.rect.y -= 6
+            self.y -= 6
+            if background.get_rgb(self.x, self.y) == (2, 0, 0):
+                self.rect.y += 6
+                self.y += 6
+            if current_time - self.last_skin_change_time > 150:
+                self.last_skin_change_time = current_time
+                if self.step == 1:
+                    self.step += 1
+                    self.back = False
+                elif self.step == 2:
+                    if self.back:
+                        self.step -= 1
+                    else:
+                        self.step += 1
+                elif self.step == 3:
+                    self.step -= 1
+                    self.back = True
+
+            image = load_image(f'm.c.back_walk_{self.step}.jpg')
+        if move_down:
+            self.direction = 'down'
+            self.rect.y += 6
+            self.y += 6
+            if background.get_rgb(self.x, self.y) == (2, 0, 0):
+                self.rect.y -= 6
+                self.y -= 6
+            if current_time - self.last_skin_change_time > 150:
+                self.last_skin_change_time = current_time
+                if self.step == 1:
+                    self.step += 1
+                    self.back = False
+                elif self.step == 2:
+                    if self.back:
+                        self.step -= 1
+                    else:
+                        self.step += 1
+                elif self.step == 3:
+                    self.step -= 1
+                    self.back = True
+
+            image = load_image(f'm.c.front_walk_{self.step}.jpg')
+        self.image = pygame.transform.scale(image, (40, 60))
+        if pygame.sprite.collide_mask(self, door):
+            if self.loc == 0:
+                all_sprites = pygame.sprite.Group()
+                player_group = pygame.sprite.Group()
+                door_group = pygame.sprite.Group()
+                background = Background('a1_m2.jpg', (600, 1300))
+                all_sprites.add(background)
+                player = PlayerAct1(285, 950)
+                player.loc = 1
+                wizardRus.rect.x = 285
+                wizardRus.rect.y = 600
+                wizardRus.canRun = False
+                wizardRus.y = 600
+                all_sprites.add(wizardRus)
+                door = Door(260, 300)
+            elif self.loc == 1:
+                all_sprites = pygame.sprite.Group()
+                player_group = pygame.sprite.Group()
+                door_group = pygame.sprite.Group()
+                background = Background('a1_m3.jpg', (1300, 600))
+                all_sprites.add(background)
+                door = Door(80, 60)
+                player = PlayerAct1(650, 300)
+                player.loc = 2
+            elif self.loc == 2:
+                all_sprites = pygame.sprite.Group()
+                player_group = pygame.sprite.Group()
+                background = Background('a1_m4.jpg', (700, 500))
+                all_sprites.add(background)
+                player = PlayerAct1(375, 300)
+                player.loc = 3
+                mathGame()
+
+        camera.update(player)
+        for sprite in all_sprites:
+            camera.apply(sprite)
+
+
+def newDialog():
+    font = pygame.font.Font(None, 30)
+    t1 = font.render('', True, (255, 255, 255))
+    t2 = font.render('', True, (255, 255, 255))
+    t3 = font.render('', True, (255, 255, 255))
+    return t1, t2, t3
+
+
+def mathGame():
+    global background, all_sprites, player_group, player, door, door_group
+    fon = pygame.transform.scale(load_image('a1_m4.jpg'), (800, 500))
+    screen.blit(fon, (0, 0))
+
+    n1 = random.randint(0, 100)
+    n3 = random.randint(0, 9)
+    n2 = n3 - n1
+    m = 'Я великий маг этого подземелья,'
+    m2 = 'и я никому не дам ходить по нему'
+    m3 = 'без моего разрешения!'
+    screen.fill((0, 0, 0))
+    screen.blit(fon, (0, 0))
+    font = pygame.font.Font(None, 30)
+    t1, t2, t3 = newDialog()
+
+    win = False
+    i = 1
+    a = 0
+    while True:
+        for event in pygame.event.get():
+            if event.type == pygame.QUIT:
+                terminate()
+            elif event.type == pygame.KEYDOWN:
+                if event.key == pygame.K_z and a == 0:
+                    screen.fill((0, 0, 0))
+                    screen.blit(fon, (0, 0))
+                    if n2 < 0:
+                        m1 = f"{n1}{n2}"
+                    else:
+                        m1 = f"{n1}+{n2}"
+                    m = 'Но ты можешь попытать удачу,'
+                    m2 = 'и решить мою задачу'
+                    m3 = 'сколько будет:' + m1
+                    t1, t2, t3 = newDialog()
+                    i = 1
+                    a = 1
+                elif 48 <= event.key <= 58 and a == 1:
+                    m = event.key - 48
+                    t1, t2, t3 = newDialog()
+                    if m == n3:
+                        screen.fill((0, 0, 0))
+                        screen.blit(fon, (0, 0))
+                        m = 'Я вижу, что ты силен в математике'
+                        m2 = 'на этот раз я тебя пропукаю,'
+                        m3 = 'но мы еще встретимся!'
+                        win = True
+                    else:
+                        screen.fill((0, 0, 0))
+                        screen.blit(fon, (0, 0))
+                        m = 'Я вижу, что ты слаб,'
+                        m2 = 'возвращайся,'
+                        m3 = 'лишь когда будешь достоен'
+                    i = 1
+                    a = 2
+                elif event.key == pygame.K_z and a == 2:
+                    if win:
+                        all_sprites = pygame.sprite.Group()
+                        player_group = pygame.sprite.Group()
+                        background = Background('a1_m5.jpg', (1200, 700))
+                        all_sprites.add(background)
+                        player = PlayerAct1(600, 450)
+                        camera.update(player)
+                        for sprite in all_sprites:
+                            camera.apply(sprite)
+                        return
+                    else:
+                        act1()
+                        return
+
+        if i <= len(m):
+            t1 = font.render(m[:i], True, (255, 255, 255))
+        elif i <= len(m) + len(m2):
+            t2 = font.render(m2[:i - len(m)], True, (255, 255, 255))
+        elif i <= len(m) + len(m2) + len(m3):
+            t3 = font.render(m3[:i - len(m) - len(m2)], True, (255, 255, 255))
+        i += 1
+        screen.blit(t1, (230, 85))
+        screen.blit(t2, (230, 115))
+        screen.blit(t3, (230, 145))
+        player_group.draw(screen)
+        pygame.display.flip()
+        clock.tick(20)
+        clock.tick(FPS)
+
+
+class Background(pygame.sprite.Sprite):
+    def __init__(self, image_path, size):
+        super().__init__()
+        self.image = load_image(image_path)
+        self.image = pygame.transform.scale(self.image, size)
+        self.rect = self.image.get_rect()
+
+    def get_rgb(self, x, y):
+        pixel = pygame.PixelArray(self.image)
+        return self.image.unmap_rgb(pixel[x][y])
+
+
+clock = pygame.time.Clock()
+FPS = 60
+
+
+def terminate():
+    pygame.quit()
+    sys.exit()
+
+
+def start_screen():
+    fon = pygame.transform.scale(load_image('fon.jpg'), (800, 500))
+    screen.blit(fon, (0, 0))
+    pygame.display.flip()
+    clock.tick(0.7)
+    fon = pygame.transform.scale(load_image('blackfon.png'), (800, 500))
+    screen.blit(fon, (0, 0))
+    pygame.display.flip()
+    while True:
+        for event in pygame.event.get():
+            if event.type == pygame.QUIT:
+                terminate()
+            elif (event.type == pygame.KEYDOWN or event.type ==
+                  pygame.MOUSEBUTTONDOWN):
+                if True:
+                    act1()
+                    return
+        clock.tick(FPS)
+
+
+class Door(pygame.sprite.Sprite):
+    image_path = load_image('exit-enter_a1.png')
+    image_path = pygame.transform.scale(image_path, (120, 96))
+    sprite_image = image_path
+
+    def __init__(self, pos_x, pos_y):
+        super().__init__(all_sprites)
+        self.image = Door.sprite_image
+        self.rect = self.image.get_rect().move(pos_x, pos_y + 20)
+        self.mask = pygame.mask.from_surface(self.image)
+
+
+# группы спрайтов
+all_sprites = pygame.sprite.Group()
+player_group = pygame.sprite.Group()
+door_group = pygame.sprite.Group()
+player = Player(400, 100)
+
+
+class wizardRus(pygame.sprite.Sprite):
+    image = load_image('wizardRus.jpg')
+    image = pygame.transform.scale(image, (80, 90))
+
+    def __init__(self, pos_x, pos_y):
+        super().__init__(all_sprites)
+        self.image = wizardRus.image
+        self.rect = self.image.get_rect().move(
+            pos_x, pos_y)
+        self.canRun = False
+        self.y = pos_y
+
+    def update(self):
+        if self.canRun:
+            self.rect.y -= 10
+            self.y -= 10
+            if self.y <= 300:
+                self.rect.y = -1000
+        if player.y <= 800:
+            self.canRun = True
+
+
+wizardRus = wizardRus(2000, 2000)
+
+
+def act1():
+    global all_sprites, player_group, player, background, door, door_group
+    fon = pygame.transform.scale(load_image('act1.png'), (800, 500))
+    screen.blit(fon, (0, 0))
+    pygame.display.flip()
+    clock.tick(1)
+    all_sprites = pygame.sprite.Group()
+    player_group = pygame.sprite.Group()
+    door_group = pygame.sprite.Group()
+    background = Background('a1_m1(1).png', (1360, 760))
+    door = Door(1200, 200)
+    all_sprites.add(background)
+    door_group.add(door)
+    player = PlayerAct1(400, 100)
+
+
+def act2():
+    fon = pygame.transform.scale(load_image('act2.png'), (800, 500))
+    screen.blit(fon, (0, 0))
+    pygame.display.flip()
+    clock.tick(1)
+
+
+def act3():
+    fon = pygame.transform.scale(load_image('act3.png'), (800, 500))
+    screen.blit(fon, (0, 0))
+    pygame.display.flip()
+    clock.tick(1)
+
+
+def menu():
+    fon = pygame.transform.scale(load_image('Menu.png'), (800, 500))
+    screen.blit(fon, (0, 0))
+    pygame.display.flip()
+    while True:
+        for event in pygame.event.get():
+            if event.type == pygame.QUIT:
+                terminate()
+            elif event.type == pygame.KEYDOWN:
+                if event.key == pygame.K_1:
+                    act1()
+                    return
+                if event.key == pygame.K_2:
+                    act2()
+                    return
+                if event.key == pygame.K_3:
+                    act3()
+                    return
+                if event.key == pygame.K_p:
+                    return
+
+        clock.tick(FPS)
+
+
+class Camera:
+    # зададим начальный сдвиг камеры
+    def __init__(self):
+        self.dx = 0
+        self.dy = 0
+
+    def apply(self, obj):
+        obj.rect.x += self.dx
+        obj.rect.y += self.dy
+
+    # позиционировать камеру на объекте target
+    def update(self, target):
+        self.dx = -(target.rect.x + target.rect.w // 2 - width // 2)
+        self.dy = -(target.rect.y + target.rect.h // 2 - height // 2)
+
+
+camera = Camera()
+if __name__ == '__main__':
+    pygame.init()
+    pygame.display.set_caption('Entangled Tale')
+    size = width, height = 800, 500
+    screen = pygame.display.set_mode(size)
+    start_screen()
+
+    running = True
+    while running:
+        for event in pygame.event.get():
+            if event.type == pygame.QUIT:
+                running = False
+            if event.type == pygame.KEYDOWN:
+                if event.key == pygame.K_o:
+                    menu()
+            if event.type == pygame.KEYUP:
+                player.stop()
+        keys = pygame.key.get_pressed()
+
+        screen.fill((0, 0, 0))
+        # Обновление игровых объектов
+        player.update(keys[pygame.K_UP], keys[pygame.K_DOWN],
+                      keys[pygame.K_LEFT], keys[pygame.K_RIGHT])
+        player.update(keys[pygame.K_w], keys[pygame.K_s],
+                      keys[pygame.K_a], keys[pygame.K_d])
+        # обновляем положение всех спрайтов
+        for sprite in all_sprites:
+            camera.apply(sprite)
+        camera.update(player)
+        wizardRus.update()
+        all_sprites.draw(screen)
+        player_group.draw(screen)
+        door_group.draw(screen)
+
+        pygame.display.flip()
+        clock.tick(FPS)
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"8b6f0fdc-2b1f-450a-a0fe-df5878d69a75\" name=\"Changes\" comment=\"сюжет акта 1\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/main.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/main.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 8\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2ZacNkP8bUFBkbLijEbVNjAOYsi\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,\r\n    &quot;ASKED_SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;Python.main.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/Mar1o/PycharmProjects/Entangled Tale&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Mar1o\\PycharmProjects\\Entangled Tale\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Mar1o\\PycharmProjects\\Entangled Tale\\data\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"Entangled Tale\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"SDK_NAME\" value=\"Python 3.11 (Entangled Tale)\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-python-sdk-67fca87a943a-d3b881c8e49f-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-233.11799.259\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"8b6f0fdc-2b1f-450a-a0fe-df5878d69a75\" name=\"Changes\" comment=\"\" />\r\n      <created>1702663593127</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1702663593127</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"start\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1702663798679</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702663798679</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"описание Entangled Tale.txt\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1702664023442</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702664023442</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"сюжет акта 1\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1702747008794</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1702747008794</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"4\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"start\" />\r\n    <MESSAGE value=\"описание Entangled Tale.txt\" />\r\n    <MESSAGE value=\"сюжет акта 1\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"сюжет акта 1\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision e5ca83d9d904b91139c14deafe6bf9735a94db53)
+++ b/.idea/workspace.xml	(date 1702823245449)
@@ -4,8 +4,17 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="8b6f0fdc-2b1f-450a-a0fe-df5878d69a75" name="Changes" comment="сюжет акта 1">
+    <list default="true" id="8b6f0fdc-2b1f-450a-a0fe-df5878d69a75" name="Changes" comment="exit-enter_a1">
+      <change afterPath="$PROJECT_DIR$/test.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/data/Menu.png" beforeDir="false" afterPath="$PROJECT_DIR$/data/Menu.png" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/data/act1.png" beforeDir="false" afterPath="$PROJECT_DIR$/data/act1.png" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/data/act2.png" beforeDir="false" afterPath="$PROJECT_DIR$/data/act2.png" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/data/act3.png" beforeDir="false" afterPath="$PROJECT_DIR$/data/act3.png" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/data/act4.png" beforeDir="false" afterPath="$PROJECT_DIR$/data/act4.png" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/data/blackfon.png" beforeDir="false" afterPath="$PROJECT_DIR$/data/blackfon.png" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/data/exit-enter_a1.png" beforeDir="false" afterPath="$PROJECT_DIR$/data/exit-enter_a1.png" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/data/wizard.png" beforeDir="false" afterPath="$PROJECT_DIR$/data/wizard.png" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/main.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -23,7 +32,7 @@
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="master" />
+        <entry key="$PROJECT_DIR$" value="4119b603b50f1cfc9f75b08b3bdeb4df26e5d3ba" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -41,7 +50,9 @@
   &quot;keyToString&quot;: {
     &quot;ASKED_ADD_EXTERNAL_FILES&quot;: &quot;true&quot;,
     &quot;ASKED_SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
+    &quot;Python.main (4).executor&quot;: &quot;Run&quot;,
     &quot;Python.main.executor&quot;: &quot;Run&quot;,
+    &quot;Python.test.executor&quot;: &quot;Run&quot;,
     &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
     &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
     &quot;git-widget-placeholder&quot;: &quot;main&quot;,
@@ -85,7 +96,7 @@
   <component name="SharedIndexes">
     <attachedChunks>
       <set>
-        <option value="bundled-python-sdk-67fca87a943a-d3b881c8e49f-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-233.11799.259" />
+        <option value="bundled-python-sdk-7a29c1521ef0-d3b881c8e49f-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-233.11799.298" />
       </set>
     </attachedChunks>
   </component>
@@ -122,7 +133,31 @@
       <option name="project" value="LOCAL" />
       <updated>1702747008794</updated>
     </task>
-    <option name="localTasksCounter" value="4" />
+    <task id="LOCAL-00004" summary="animations main character">
+      <option name="closed" value="true" />
+      <created>1702759253894</created>
+      <option name="number" value="00004" />
+      <option name="presentableId" value="LOCAL-00004" />
+      <option name="project" value="LOCAL" />
+      <updated>1702759253894</updated>
+    </task>
+    <task id="LOCAL-00005" summary="animations main character">
+      <option name="closed" value="true" />
+      <created>1702759279832</created>
+      <option name="number" value="00005" />
+      <option name="presentableId" value="LOCAL-00005" />
+      <option name="project" value="LOCAL" />
+      <updated>1702759279832</updated>
+    </task>
+    <task id="LOCAL-00006" summary="exit-enter_a1">
+      <option name="closed" value="true" />
+      <created>1702812381417</created>
+      <option name="number" value="00006" />
+      <option name="presentableId" value="LOCAL-00006" />
+      <option name="project" value="LOCAL" />
+      <updated>1702812381417</updated>
+    </task>
+    <option name="localTasksCounter" value="7" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -140,6 +175,8 @@
     <MESSAGE value="start" />
     <MESSAGE value="описание Entangled Tale.txt" />
     <MESSAGE value="сюжет акта 1" />
-    <option name="LAST_COMMIT_MESSAGE" value="сюжет акта 1" />
+    <MESSAGE value="animations main character" />
+    <MESSAGE value="exit-enter_a1" />
+    <option name="LAST_COMMIT_MESSAGE" value="exit-enter_a1" />
   </component>
 </project>
\ No newline at end of file
